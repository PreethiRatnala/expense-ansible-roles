- name: disable the existing nodejs module
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable the nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.dnf: 
    name: "{{ item }}"
    state: installed
  loop:
    - nodejs
    - mysql

- name: adding user
  ansible.builtin.user: 
    name: expense

- name: create app directory
  tags:
  - deployment
  ansible.builtin.file:
    path: /app
    state: directory
    mode: '0755'

#- name: download app code
  # ansible.builtin.command: curl -o /tmp/backend.zip https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
- name: download and unzip the backend code
  tags:
  - deployment
  ansible.builtin.unarchive:
    src: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /app
    remote_src: yes

- name: Install packages based on package.json.
  tags:
  - deployment
  community.general.npm:
    path: /app

- name: Copy file with ansible server to remote
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: install python dependencies
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9

- name: load schema into backend
  community.mysql.mysql_db:
    name: my_sql
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    state: import
    target: /app/schema/backend.sql

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable the backend service
  tags:
  - deployment
  ansible.builtin.systemd_service:
    name: backend
    state: started
    enabled: yes